{"version":3,"file":"media-encoder-host-broker-DZztKf8z.js","sources":["../../node_modules/media-encoder-host-broker/build/es2019/module.js"],"sourcesContent":["import { createBroker } from 'broker-factory';\nimport { addUniqueNumber } from 'fast-unique-numbers';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst encoderIds = new Set();\nconst encoderInstanceIds = new Set();\nconst messagePorts = new WeakMap();\nexport const wrap = createBroker({\n    deregister: ({ call }) => {\n        return async (port) => {\n            const encoderId = messagePorts.get(port);\n            if (encoderId === undefined) {\n                throw new Error('There is no encoder registered with the given port.');\n            }\n            const result = await call('deregister', { encoderId });\n            encoderIds.delete(encoderId);\n            messagePorts.delete(port);\n            return result;\n        };\n    },\n    encode: ({ call }) => {\n        return async (encoderInstanceId, timeslice) => {\n            const arrayBuffers = await call('encode', { encoderInstanceId, timeslice });\n            encoderInstanceIds.delete(encoderInstanceId);\n            return arrayBuffers;\n        };\n    },\n    instantiate: ({ call }) => {\n        return async (mimeType, sampleRate) => {\n            const encoderInstanceId = addUniqueNumber(encoderInstanceIds);\n            const port = await call('instantiate', { encoderInstanceId, mimeType, sampleRate });\n            return { encoderInstanceId, port };\n        };\n    },\n    register: ({ call }) => {\n        return async (port) => {\n            if (messagePorts.has(port)) {\n                throw new Error('');\n            }\n            const encoderId = addUniqueNumber(encoderIds);\n            messagePorts.set(port, encoderId);\n            try {\n                return await call('register', { encoderId, port }, [port]);\n            }\n            catch (err) {\n                encoderIds.delete(encoderId);\n                messagePorts.delete(port);\n                throw err;\n            }\n        };\n    }\n});\nexport const load = (url) => {\n    const worker = new Worker(url);\n    return wrap(worker);\n};\n//# sourceMappingURL=module.js.map"],"names":["encoderIds","encoderInstanceIds","messagePorts","wrap","createBroker","call","port","encoderId","result","encoderInstanceId","timeslice","arrayBuffers","mimeType","sampleRate","addUniqueNumber","err","load","url","worker"],"mappings":"uGAQA,MAAMA,EAAa,IAAI,IACjBC,EAAqB,IAAI,IACzBC,EAAe,IAAI,QACZC,EAAOC,EAAa,CAC7B,WAAY,CAAC,CAAE,KAAAC,KACJ,MAAOC,GAAS,CACnB,MAAMC,EAAYL,EAAa,IAAII,CAAI,EACvC,GAAIC,IAAc,OACd,MAAM,IAAI,MAAM,qDAAqD,EAEzE,MAAMC,EAAS,MAAMH,EAAK,aAAc,CAAE,UAAAE,CAAW,CAAA,EACrD,OAAAP,EAAW,OAAOO,CAAS,EAC3BL,EAAa,OAAOI,CAAI,EACjBE,CACnB,EAEI,OAAQ,CAAC,CAAE,KAAAH,KACA,MAAOI,EAAmBC,IAAc,CAC3C,MAAMC,EAAe,MAAMN,EAAK,SAAU,CAAE,kBAAAI,EAAmB,UAAAC,CAAS,CAAE,EAC1E,OAAAT,EAAmB,OAAOQ,CAAiB,EACpCE,CACnB,EAEI,YAAa,CAAC,CAAE,KAAAN,KACL,MAAOO,EAAUC,IAAe,CACnC,MAAMJ,EAAoBK,EAAgBb,CAAkB,EACtDK,EAAO,MAAMD,EAAK,cAAe,CAAE,kBAAAI,EAAmB,SAAAG,EAAU,WAAAC,CAAU,CAAE,EAClF,MAAO,CAAE,kBAAAJ,EAAmB,KAAAH,EACxC,EAEI,SAAU,CAAC,CAAE,KAAAD,KACF,MAAOC,GAAS,CACnB,GAAIJ,EAAa,IAAII,CAAI,EACrB,MAAM,IAAI,MAAM,EAAE,EAEtB,MAAMC,EAAYO,EAAgBd,CAAU,EAC5CE,EAAa,IAAII,EAAMC,CAAS,EAChC,GAAI,CACA,OAAO,MAAMF,EAAK,WAAY,CAAE,UAAAE,EAAW,KAAAD,GAAQ,CAACA,CAAI,CAAC,CAC5D,OACMS,EAAK,CACR,MAAAf,EAAW,OAAOO,CAAS,EAC3BL,EAAa,OAAOI,CAAI,EAClBS,CACT,CACb,CAEA,CAAC,EACYC,EAAQC,GAAQ,CACzB,MAAMC,EAAS,IAAI,OAAOD,CAAG,EAC7B,OAAOd,EAAKe,CAAM,CACtB","x_google_ignoreList":[0]}