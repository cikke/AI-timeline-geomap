class l{constructor(t,i=0,n){if(i<0||n!==void 0&&n<0)throw new RangeError;const s=t.reduce((e,U)=>e+U.byteLength,0);if(i>s||n!==void 0&&i+n>s)throw new RangeError;const u=[],h=n===void 0?s-i:n,f=[];let r=0,a=i;for(const e of t)if(f.length===0)if(e.byteLength>a){r=e.byteLength-a;const U=r>h?h:r;u.push(new DataView(e,a,U)),f.push(e)}else a-=e.byteLength;else if(r<h){r+=e.byteLength;const U=r>h?e.byteLength-r+h:e.byteLength;u.push(new DataView(e,0,U)),f.push(e)}this._buffers=f,this._byteLength=h,this._byteOffset=a,this._dataViews=u,this._internalBuffer=new DataView(new ArrayBuffer(8))}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get byteOffset(){return this._byteOffset}getFloat32(t,i){return this._internalBuffer.setUint8(0,this.getUint8(t+0)),this._internalBuffer.setUint8(1,this.getUint8(t+1)),this._internalBuffer.setUint8(2,this.getUint8(t+2)),this._internalBuffer.setUint8(3,this.getUint8(t+3)),this._internalBuffer.getFloat32(0,i)}getFloat64(t,i){return this._internalBuffer.setUint8(0,this.getUint8(t+0)),this._internalBuffer.setUint8(1,this.getUint8(t+1)),this._internalBuffer.setUint8(2,this.getUint8(t+2)),this._internalBuffer.setUint8(3,this.getUint8(t+3)),this._internalBuffer.setUint8(4,this.getUint8(t+4)),this._internalBuffer.setUint8(5,this.getUint8(t+5)),this._internalBuffer.setUint8(6,this.getUint8(t+6)),this._internalBuffer.setUint8(7,this.getUint8(t+7)),this._internalBuffer.getFloat64(0,i)}getInt16(t,i){return this._internalBuffer.setUint8(0,this.getUint8(t+0)),this._internalBuffer.setUint8(1,this.getUint8(t+1)),this._internalBuffer.getInt16(0,i)}getInt32(t,i){return this._internalBuffer.setUint8(0,this.getUint8(t+0)),this._internalBuffer.setUint8(1,this.getUint8(t+1)),this._internalBuffer.setUint8(2,this.getUint8(t+2)),this._internalBuffer.setUint8(3,this.getUint8(t+3)),this._internalBuffer.getInt32(0,i)}getInt8(t){const[i,n]=this._findDataViewWithOffset(t);return i.getInt8(t-n)}getUint16(t,i){return this._internalBuffer.setUint8(0,this.getUint8(t+0)),this._internalBuffer.setUint8(1,this.getUint8(t+1)),this._internalBuffer.getUint16(0,i)}getUint32(t,i){return this._internalBuffer.setUint8(0,this.getUint8(t+0)),this._internalBuffer.setUint8(1,this.getUint8(t+1)),this._internalBuffer.setUint8(2,this.getUint8(t+2)),this._internalBuffer.setUint8(3,this.getUint8(t+3)),this._internalBuffer.getUint32(0,i)}getUint8(t){const[i,n]=this._findDataViewWithOffset(t);return i.getUint8(t-n)}setFloat32(t,i,n){this._internalBuffer.setFloat32(0,i,n),this.setUint8(t,this._internalBuffer.getUint8(0)),this.setUint8(t+1,this._internalBuffer.getUint8(1)),this.setUint8(t+2,this._internalBuffer.getUint8(2)),this.setUint8(t+3,this._internalBuffer.getUint8(3))}setFloat64(t,i,n){this._internalBuffer.setFloat64(0,i,n),this.setUint8(t,this._internalBuffer.getUint8(0)),this.setUint8(t+1,this._internalBuffer.getUint8(1)),this.setUint8(t+2,this._internalBuffer.getUint8(2)),this.setUint8(t+3,this._internalBuffer.getUint8(3)),this.setUint8(t+4,this._internalBuffer.getUint8(4)),this.setUint8(t+5,this._internalBuffer.getUint8(5)),this.setUint8(t+6,this._internalBuffer.getUint8(6)),this.setUint8(t+7,this._internalBuffer.getUint8(7))}setInt16(t,i,n){this._internalBuffer.setInt16(0,i,n),this.setUint8(t,this._internalBuffer.getUint8(0)),this.setUint8(t+1,this._internalBuffer.getUint8(1))}setInt32(t,i,n){this._internalBuffer.setInt32(0,i,n),this.setUint8(t,this._internalBuffer.getUint8(0)),this.setUint8(t+1,this._internalBuffer.getUint8(1)),this.setUint8(t+2,this._internalBuffer.getUint8(2)),this.setUint8(t+3,this._internalBuffer.getUint8(3))}setInt8(t,i){const[n,s]=this._findDataViewWithOffset(t);n.setInt8(t-s,i)}setUint16(t,i,n){this._internalBuffer.setUint16(0,i,n),this.setUint8(t,this._internalBuffer.getUint8(0)),this.setUint8(t+1,this._internalBuffer.getUint8(1))}setUint32(t,i,n){this._internalBuffer.setUint32(0,i,n),this.setUint8(t,this._internalBuffer.getUint8(0)),this.setUint8(t+1,this._internalBuffer.getUint8(1)),this.setUint8(t+2,this._internalBuffer.getUint8(2)),this.setUint8(t+3,this._internalBuffer.getUint8(3))}setUint8(t,i){const[n,s]=this._findDataViewWithOffset(t);n.setUint8(t-s,i)}_findDataViewWithOffset(t){let i=0;for(const n of this._dataViews){const s=i+n.byteLength;if(t>=i&&t<s)return[n,i];i=s}throw new RangeError}}export{l as M};
//# sourceMappingURL=multi-buffer-data-view-IGXr9-7R.js.map
